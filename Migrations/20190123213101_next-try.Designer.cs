// <auto-generated />
using System;
using BibliotecaOnline.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BibliotecaOnline.Migrations
{
    [DbContext(typeof(BibliotecaOnlineContext))]
    [Migration("20190123213101_next-try")]
    partial class nexttry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDay");

                    b.Property<string>("Birthplace");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BuyPrice");

                    b.Property<string>("Description");

                    b.Property<string>("Editura");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20);

                    b.Property<string>("Language");

                    b.Property<int>("NrOfPages");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Year");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.BookAuthor", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.BookGenre", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("GenreId");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.BookStore", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("StoreId");

                    b.Property<int>("Stock");

                    b.HasKey("BookId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("BookStore");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibliotecaUserId");

                    b.Property<int>("BookId");

                    b.Property<DateTime>("Data");

                    b.Property<DateTime?>("DataReturn");

                    b.Property<string>("Mention");

                    b.Property<string>("MentionReturn");

                    b.Property<bool>("Returned");

                    b.Property<int>("StoreId");

                    b.HasKey("LoanId");

                    b.HasIndex("BibliotecaUserId");

                    b.HasIndex("BookId");

                    b.HasIndex("StoreId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.LoanRequest", b =>
                {
                    b.Property<int>("LoanRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted");

                    b.Property<int>("BibliotecaUserId");

                    b.Property<int>("BookId");

                    b.Property<DateTime>("Data");

                    b.Property<string>("Mention");

                    b.Property<int>("StoreId");

                    b.HasKey("LoanRequestId");

                    b.HasIndex("BibliotecaUserId");

                    b.HasIndex("BookId");

                    b.HasIndex("StoreId");

                    b.ToTable("LoanRequests");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Review", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("BibliotecaUserId");

                    b.Property<int>("ReviewId");

                    b.Property<DateTime>("Data");

                    b.Property<double>("Rate");

                    b.Property<string>("Text");

                    b.HasKey("BookId", "BibliotecaUserId", "ReviewId");

                    b.HasAlternateKey("ReviewId");

                    b.HasIndex("BibliotecaUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.ReviewRequest", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("BibliotecaUserId");

                    b.Property<int>("ReviewRequestId");

                    b.Property<bool>("Accepted");

                    b.Property<DateTime>("Data");

                    b.Property<double>("Rate");

                    b.Property<string>("Text");

                    b.HasKey("BookId", "BibliotecaUserId", "ReviewRequestId");

                    b.HasAlternateKey("ReviewRequestId");

                    b.HasIndex("BibliotecaUserId");

                    b.ToTable("ReviewRequests");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("BibliotecaUserId");

                    b.Property<int>("BookId");

                    b.HasKey("WishListId");

                    b.HasIndex("BibliotecaUserId");

                    b.HasIndex("BookId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.BookAuthor", b =>
                {
                    b.HasOne("BibliotecaOnline.DbModels.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.BookGenre", b =>
                {
                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.BookStore", b =>
                {
                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("BookStores")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Store", "Store")
                        .WithMany("BookStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Loan", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser", "BibliotecaUser")
                        .WithMany("Loans")
                        .HasForeignKey("BibliotecaUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Store", "Store")
                        .WithMany("Loans")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.LoanRequest", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser", "BibliotecaUser")
                        .WithMany("LoanRequests")
                        .HasForeignKey("BibliotecaUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("LoanRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Store", "Store")
                        .WithMany("LoanRequests")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.Review", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser", "BibliotecaUser")
                        .WithMany("Reviews")
                        .HasForeignKey("BibliotecaUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.ReviewRequest", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser", "BibliotecaUser")
                        .WithMany("ReviewRequests")
                        .HasForeignKey("BibliotecaUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("ReviewRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BibliotecaOnline.DbModels.WishList", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser", "BibliotecaUser")
                        .WithMany("WishLists")
                        .HasForeignKey("BibliotecaUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.DbModels.Book", "Book")
                        .WithMany("WishLists")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BibliotecaOnline.Areas.Identity.DbModels.BibliotecaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
